# 1. Increase server connection timeout (to handle slow requests)
server.connection-timeout=60s  # Adjust to suit your needs (e.g., 120s)

# 2. Increase maximum file size and request size (even if you're not uploading files, large payloads could cause issues)
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# 3. HTTP keep-alive settings (to prevent premature connection closure)
server.http2.enabled=true
server.tomcat.max-threads=200

# 4. Enable CORS (if the issue might be related to cross-origin resource sharing)
# Add specific origin if needed, or use "*" for all origins (not recommended for production)
spring.mvc.cors.allowed-origins=*
spring.mvc.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.mvc.cors.allowed-headers=Authorization,Content-Type
spring.mvc.cors.allow-credentials=true
spring.mvc.cors.max-age=3600





























private String escapeLDAPSearchFilter(String input) {
    if (input == null || input.isEmpty()) {
        return "";
    }

    StringBuilder sb = new StringBuilder(input.length());

    for (char c : input.toCharArray()) {
        switch (c) {
            case '\\': // Backslash
                sb.append("\\5c");
                break;
            case '*': // Asterisk
                sb.append("\\2a");
                break;
            case '(': // Opening parenthesis
                sb.append("\\28");
                break;
            case ')': // Closing parenthesis
                sb.append("\\29");
                break;
            case '\u0000': // Null character
                sb.append("\\00");
                break;
            case '/': // Forward slash (optional based on your needs)
                sb.append("\\2f");
                break;
            case '=': // Equals sign (optional, but adds extra safety)
                sb.append("\\3d");
                break;
            default:
                if (c < 0x20 || c > 0x7E) { // Non-printable ASCII characters
                    sb.append(String.format("\\%02x", (int) c));
                } else {
                    sb.append(c);
                }
        }
    }

    return sb.toString();
}








