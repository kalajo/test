import org.springframework.web.bind.annotation.*;
import org.springframework.http.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@RestController
@RequestMapping("/api")
public class AuthController {

    private static final Logger logger = LoggerFactory.getLogger(AuthController.class);
    private final AuthenticationService authenticationService;
    private final DataSourceRouting dataSourceRouting;

    public AuthController(AuthenticationService authenticationService, DataSourceRouting dataSourceRouting) {
        this.authenticationService = authenticationService;
        this.dataSourceRouting = dataSourceRouting;
    }

    @PostMapping(path = "/login", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity<?> login(@RequestBody User user) {
        try {
            // Validate and sanitize user input
            String selectedEnv = user.getSelectedEnv();
            if (selectedEnv == null || !isValidEnv(selectedEnv)) {
                return new ResponseEntity<>("Invalid environment selected", HttpStatus.BAD_REQUEST);
            }

            if (dataSourceRouting.getDataSourceMapForEnv(selectedEnv)) {
                return authenticationService.authenticateUser(user);
            } else {
                return new ResponseEntity<>("Environment not found", HttpStatus.NOT_FOUND);
            }
        } catch (Exception e) {
            logger.error("Error during login", e);
            return new ResponseEntity<>("Internal server error", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private boolean isValidEnv(String env) {
        // Add your validation logic here, e.g., allow only specific environment names
        return env.matches("^[a-zA-Z0-9_-]+$");
    }
}
