import org.springframework.web.bind.annotation.*;
import org.springframework.http.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@RestController
@CrossOrigin(maxAge = 3600)
public class LoginController {

    private static final Logger logger = LoggerFactory.getLogger(LoginController.class);
    private final EnvRoutingDatasource dataSourceRouting = EnvRoutingDatasource.getInstance();

    @Autowired
    private AuthenticationService authenticationService;

    @PostMapping(path = "/api/login", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> login(@RequestBody User user) {
        try {
            if (dataSourceRouting.getDataSourceMapForEnv(user.getSelectedEnv())) {
                return authenticationService.authenticateUser(sanitizeUser(user));
            } else {
                return ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE).body("Selected DB not available");
            }
        } catch (SQLException ex) {
            logger.error("Error during login", ex);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Selected DB not available");
        }
    }

    private User sanitizeUser(User user) {
        // Sanitize user input to prevent LDAP injection
        user.setUsername(escapeLDAPSearchFilter(user.getUsername()));
        user.setPassword(escapeLDAPSearchFilter(user.getPassword()));
        return user;
    }

    private String escapeLDAPSearchFilter(String input) {
        // Escape special characters in LDAP search filter
        StringBuilder sb = new StringBuilder();
        for (char c : input.toCharArray()) {
            switch (c) {
                case '\\':
                    sb.append("\\5c");
                    break;
                case '*':
                    sb.append("\\2a");
                    break;
                case '(':
                    sb.append("\\28");
                    break;
                case ')':
                    sb.append("\\29");
                    break;
                case '\u0000':
                    sb.append("\\00");
                    break;
                default:
                    sb.append(c);
            }
        }
        return sb.toString();
    }
}
