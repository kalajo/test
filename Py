import requests
import time
import xml.etree.ElementTree as ET

# Configuration - Edit these values
SPLUNK_AUTH_URL = "https://splunk-rest.ops.tiaa-cref.org/services/auth/login"
SPLUNK_SEARCH_URL = "https://splunk-rest.ops.tiaa-cref.org/services/search/jobs"
USERNAME = "kalajo"
PASSWORD = "Qwer"
SEARCH_QUERY = "search index=* | head 10"  # Simple test query
OUTPUT_FILE = "results.csv"

# Disable SSL warnings for testing
requests.packages.urllib3.disable_warnings()

# 1. Authentication
auth_response = requests.post(
    SPLUNK_AUTH_URL,
    data={"username": USERNAME, "password": PASSWORD},
    verify=False
)

if auth_response.status_code == 200:
    # Parse session key from XML response
    root = ET.fromstring(auth_response.content)
    session_key = root.find('.//sessionKey').text
    print(f"Authenticated successfully. Session key: {session_key[:15]}...")
else:
    print(f"Authentication failed: {auth_response.status_code}")
    exit(1)

# 2. Create search job
search_headers = {
    "Authorization": f"Splunk {session_key}",
    "Content-Type": "application/x-www-form-urlencoded"
}

search_data = {
    "search": SEARCH_QUERY,
    "output_mode": "csv"
}

job_response = requests.post(
    SPLUNK_SEARCH_URL,
    headers=search_headers,
    data=search_data,
    verify=False
)

if job_response.status_code in [200, 201]:
    job_id = ET.fromstring(job_response.content).find('.//sid').text
    print(f"Search job created. ID: {job_id}")
else:
    print(f"Search creation failed: {job_response.status_code}")
    exit(1)

# 3. Wait for job completion
while True:
    status_response = requests.get(
        f"{SPLUNK_SEARCH_URL}/{job_id}",
        headers=search_headers,
        verify=False
    )
    
    status_root = ET.fromstring(status_response.content)
    is_done = status_root.find('.//s:key[@name="isDone"]', {'s': 'http://dev.splunk.com/ns/rest'})
    
    if is_done.text == "1":
        print("Search completed successfully")
        break
    
    print("Waiting for search to complete...")
    time.sleep(2)

# 4. Get results
results_response = requests.get(
    f"{SPLUNK_SEARCH_URL}/{job_id}/results",
    headers=search_headers,
    params={"output_mode": "csv"},
    verify=False
)

if results_response.status_code == 200:
    with open(OUTPUT_FILE, "w") as f:
        f.write(results_response.text)
    print(f"Results saved to {OUTPUT_FILE}")
else:
    print(f"Failed to get results: {results_response.status_code}")
