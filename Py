import requests
import xml.etree.ElementTree as ET
import time
from datetime import datetime

# ======= CONFIGURATION ========
SPLUNK_AUTH_URL = "https://splunk-rest.ops.tiaa-cref.org/services/auth/login"
BASE_REST_URL = "https://splunk-rest.ops.tiaa-cref.org/servicesNS/{username}/search/search/jobs"
USERNAME = "kalajo"
PASSWORD = "Qwer"
VERIFY_SSL = False
SAFE_SEARCH = "| makeresults count=1"  # Simplest possible valid search
# ==============================

def get_session_key():
    """Authenticate and return session key with validation"""
    try:
        response = requests.post(
            SPLUNK_AUTH_URL,
            data={"username": USERNAME, "password": PASSWORD},
            verify=VERIFY_SSL
        )
        response.raise_for_status()
        
        # Validate XML structure
        root = ET.fromstring(response.content)
        if (session_key := root.findtext('.//sessionKey')) is None:
            raise ValueError("Session key not found in authentication response")
            
        print(f"Auth success! Session key: {session_key[:15]}...")
        return session_key
        
    except Exception as e:
        print(f"Authentication failed: {str(e)}")
        print(f"Auth response content: {response.text if 'response' in locals() else 'No response'}")
        exit(1)

def create_search_job(session_key):
    """Create search job with validation"""
    try:
        endpoint = BASE_REST_URL.format(username=USERNAME)
        response = requests.post(
            endpoint,
            headers={
                "Authorization": f"Splunk {session_key}",
                "Content-Type": "application/x-www-form-urlencoded"
            },
            data={
                "search": SAFE_SEARCH,
                "output_mode": "csv",
                "adhoc_search_level": "fast"
            },
            verify=VERIFY_SSL
        )
        response.raise_for_status()
        
        # Validate search creation response
        root = ET.fromstring(response.content)
        if (search_id := root.findtext('.//sid')) is None:
            raise ValueError("Search ID not found in response")
            
        print(f"Search job created successfully. ID: {search_id}")
        return search_id
        
    except Exception as e:
        print(f"Search creation failed: {str(e)}")
        print(f"Endpoint used: {endpoint}")
        print(f"Response content: {response.text if 'response' in locals() else 'No response'}")
        exit(1)

def get_search_results(session_key, search_id):
    """Retrieve and save results with validation"""
    try:
        results_url = f"{BASE_REST_URL.format(username=USERNAME)}/{search_id}/results"
        
        # Wait for completion
        start_time = time.time()
        while time.time() - start_time < 30:  # 30s timeout
            status_response = requests.get(
                f"{BASE_REST_URL.format(username=USERNAME)}/{search_id}",
                headers={"Authorization": f"Splunk {session_key}"},
                verify=VERIFY_SSL
            )
            status_response.raise_for_status()
            
            status_root = ET.fromstring(status_response.content)
            if status_root.findtext('.//s:key[@name="isDone"]', {'s': 'http://dev.splunk.com/ns/rest'}) == "1":
                break
            time.sleep(2)
        else:
            raise TimeoutError("Search timed out after 30 seconds")

        # Get results
        results_response = requests.get(
            results_url,
            headers={"Authorization": f"Splunk {session_key}"},
            params={"output_mode": "csv"},
            verify=VERIFY_SSL
        )
        results_response.raise_for_status()
        
        # Save to file
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"splunk_results_{timestamp}.csv"
        with open(filename, 'w') as f:
            f.write(results_response.text)
            
        print(f"Results saved to {filename}")
        return True
        
    except Exception as e:
        print(f"Results retrieval failed: {str(e)}")
        exit(1)

if __name__ == "__main__":
    # 1. Authentication
    session_key = get_session_key()
    
    # 2. Search job creation
    search_id = create_search_job(session_key)
    
    # 3. Results handling
    get_search_results(session_key, search_id)
