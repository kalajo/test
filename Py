import requests
import xml.etree.ElementTree as ET

# ======= CONFIGURATION ========
SPLUNK_AUTH_URL = "https://splunk-rest.ops.tiaa-cref.org/services/auth/login"
USERNAME = "kalajo"
PASSWORD = "Qwer"
VERIFY_SSL = False
# ==============================

# Disable SSL warnings
requests.packages.urllib3.disable_warnings()

# 1. Authentication -----------------------------------------------------------
print("=== PHASE 1: AUTHENTICATION ===")
auth_response = requests.post(
    SPLUNK_AUTH_URL,
    data={"username": USERNAME, "password": PASSWORD},
    verify=VERIFY_SSL
)

print(f"Auth Response Code: {auth_response.status_code}")
print("Auth Response Headers:")
print(auth_response.headers)
print("Auth Response Content (first 200 chars):")
print(auth_response.text[:200])

try:
    root = ET.fromstring(auth_response.content)
    session_key = root.find('.//sessionKey').text
    print(f"\nSession Key (truncated): {session_key[:15]}...\n")
except Exception as e:
    print(f"Failed to parse session key: {str(e)}")
    exit(1)

# 2. Search Endpoint Testing --------------------------------------------------
print("\n=== PHASE 2: SEARCH ENDPOINT TESTING ===")

# Try different endpoint variations
endpoints = [
    ("Standard", "https://splunk-rest.ops.tiaa-cref.org/services/search/jobs"),
    ("Namespaced", f"https://splunk-rest.ops.tiaa-cref.org/servicesNS/{USERNAME}/search/search/jobs"),
    ("Simplified", "https://splunk-rest.ops.tiaa-cref.org/services/search/jobs?output_mode=json")
]

test_searches = [
    {"search": "| makeresults count=1", "output_mode": "csv"},
    {"search": "search index=* | head 1", "output_mode": "csv"}
]

for endpoint_name, url in endpoints:
    print(f"\nAttempting endpoint: {endpoint_name} ({url})")
    
    for search in test_searches:
        print(f"\nTesting search: {search['search']}")
        
        try:
            response = requests.post(
                url,
                headers={
                    "Authorization": f"Splunk {session_key}",
                    "Content-Type": "application/x-www-form-urlencoded"
                },
                data=search,
                verify=VERIFY_SSL
            )
            
            print(f"Response Code: {response.status_code}")
            print("Response Headers:")
            print(response.headers)
            print("Response Content (first 500 chars):")
            print(response.text[:500])
            
            if response.status_code == 200:
                try:
                    if "xml" in response.headers['Content-Type']:
                        root = ET.fromstring(response.content)
                        search_id = root.find('.//sid').text
                        print(f"Success! Search ID: {search_id}")
                        exit(0)
                    else:
                        print("Unexpected response format:")
                        print(response.json())
                except Exception as e:
                    print(f"Parse error: {str(e)}")
            
        except Exception as e:
            print(f"Request failed: {str(e)}")

print("\n=== TROUBLESHOOTING SUGGESTIONS ===")
print("1. Verify the Splunk REST API base URL is correct")
print("2. Check user permissions in Splunk Web:")
print("   - Settings > User > Your User > Roles > Check 'search' capability")
print("3. Try manual curl test:")
print(f"   curl -k -X POST -H 'Authorization: Splunk {session_key[:15]}...' \\")
print(f"   -d 'search=| makeresults' {endpoints[0][1]}")
print("4. Check Splunk server logs for detailed error messages")
