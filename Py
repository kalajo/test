import requests
import xml.etree.ElementTree as ET
import time
from datetime import datetime

# ======= CONFIGURATION ========
SPLUNK_AUTH_URL = "https://splunk-rest.ops.tiaa-cref.org/services/auth/login"
BASE_REST_URL = "https://splunk-rest.ops.tiaa-cref.org/services"
USERNAME = "kalajo"
PASSWORD = "Qwer"
VERIFY_SSL = False
SEARCH_QUERY = "index=* | head 10"  # Basic search for first 10 results
# ==============================

# Disable SSL warnings if needed
if not VERIFY_SSL:
    requests.packages.urllib3.disable_warnings()

def get_session_key():
    """Authenticate and return session key"""
    try:
        response = requests.post(
            SPLUNK_AUTH_URL,
            data={"username": USERNAME, "password": PASSWORD},
            verify=VERIFY_SSL
        )
        response.raise_for_status()
        root = ET.fromstring(response.content)
        return root.find('.//sessionKey').text
    except Exception as e:
        print(f"Authentication failed: {str(e)}")
        exit(1)

def try_search_endpoints(session_key):
    """Attempt different search endpoints with fallback"""
    endpoints = [
        f"{BASE_REST_URL}/search/jobs",  # Standard endpoint
        f"{BASE_REST_URL}NS/{USERNAME}/search/search/jobs"  # Namespaced
    ]
    
    for endpoint in endpoints:
        try:
            response = requests.post(
                endpoint,
                headers={
                    "Authorization": f"Splunk {session_key}",
                    "Content-Type": "application/x-www-form-urlencoded"
                },
                data={"search": SEARCH_QUERY, "output_mode": "csv"},
                verify=VERIFY_SSL
            )
            response.raise_for_status()
            
            root = ET.fromstring(response.content)
            search_id = root.find('.//sid').text
            print(f"Success using endpoint: {endpoint}")
            return search_id
            
        except Exception as e:
            print(f"Attempt failed for {endpoint}: {str(e)}")
            continue
            
    return None

def wait_for_completion(session_key, search_id):
    """Wait for search job to complete"""
    headers = {"Authorization": f"Splunk {session_key}"}
    status_url = f"{BASE_REST_URL}/search/jobs/{search_id}"
    
    while True:
        try:
            response = requests.get(status_url, headers=headers, verify=VERIFY_SSL)
            root = ET.fromstring(response.content)
            is_done = root.find('.//s:key[@name="isDone"]', {'s': 'http://dev.splunk.com/ns/rest'})
            
            if is_done.text == "1":
                print("Search completed successfully")
                return
                
            print("Waiting for search to complete...")
            time.sleep(2)
            
        except Exception as e:
            print(f"Status check failed: {str(e)}")
            exit(1)

def save_results(session_key, search_id):
    """Save search results to CSV file"""
    results_url = f"{BASE_REST_URL}/search/jobs/{search_id}/results"
    headers = {"Authorization": f"Splunk {session_key}"}
    
    try:
        response = requests.get(
            results_url,
            headers=headers,
            params={"output_mode": "csv"},
            verify=VERIFY_SSL
        )
        response.raise_for_status()
        
        # Generate filename with timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"splunk_results_{timestamp}.csv"
        
        # Save to file
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(response.text)
            
        print(f"Results saved to: {filename}")
        
    except Exception as e:
        print(f"Failed to save results: {str(e)}")
        exit(1)

def main():
    # Get authenticated session
    session_key = get_session_key()
    print(f"Obtained session key: {session_key[:15]}...")

    # Attempt search creation
    search_id = try_search_endpoints(session_key)
    
    if not search_id:
        print("\nAll search attempts failed. Potential issues:")
        print("1. Incorrect REST API endpoints")
        print("2. Missing search permissions for user")
        print("3. Network/firewall restrictions")
        print("4. Invalid session key")
        exit(1)
        
    print(f"\nSearch job created successfully! ID: {search_id}")
    
    # Wait for completion
    wait_for_completion(session_key, search_id)
    
    # Save results
    save_results(session_key, search_id)

if __name__ == "__main__":
    main()
