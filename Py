import requests
import xml.etree.ElementTree as ET
import time
from datetime import datetime

# ======= CONFIGURATION ========
SPLUNK_AUTH_URL = "https://splunk-rest.ops.tiaa-cref.org/services/auth/login"
BASE_REST_URL = "https://splunk-rest.ops.tiaa-cref.org/servicesNS/{username}/search/search/jobs"
USERNAME = "kalajo"
PASSWORD = "Qwer"
VERIFY_SSL = False
SEARCH_QUERY = "| makeresults count=1 | eval test_field='success'"  # Guaranteed result
# ==============================

# Disable SSL warnings if needed
if not VERIFY_SSL:
    requests.packages.urllib3.disable_warnings()

def get_session_key():
    """Authenticate and return session key"""
    try:
        response = requests.post(
            SPLUNK_AUTH_URL,
            data={"username": USERNAME, "password": PASSWORD},
            verify=VERIFY_SSL
        )
        response.raise_for_status()
        root = ET.fromstring(response.content)
        return root.find('.//sessionKey').text
    except Exception as e:
        print(f"Authentication failed: {str(e)}")
        exit(1)

def create_search_job(session_key):
    """Create search job with namespace handling"""
    endpoint = BASE_REST_URL.format(username=USERNAME)
    try:
        response = requests.post(
            endpoint,
            headers={
                "Authorization": f"Splunk {session_key}",
                "Content-Type": "application/x-www-form-urlencoded"
            },
            data={"search": SEARCH_QUERY, "output_mode": "csv"},
            verify=VERIFY_SSL
        )
        response.raise_for_status()
        
        # Debug: Print raw XML response
        print("\nSearch creation response XML:")
        print(response.text)
        
        root = ET.fromstring(response.content)
        search_id = root.find('.//sid').text
        print(f"\nSearch job created! ID: {search_id}")
        return search_id
    except Exception as e:
        print(f"Search creation failed: {str(e)}")
        exit(1)

def get_results(session_key, search_id):
    """Get results with proper namespace handling"""
    namespace = {'ns': 'http://dev.splunk.com/ns/rest'}
    results_url = f"{BASE_REST_URL.format(username=USERNAME)}/{search_id}/results"
    
    try:
        # Wait for completion with timeout
        start_time = time.time()
        while time.time() - start_time < 30:
            status_response = requests.get(
                f"{BASE_REST_URL.format(username=USERNAME)}/{search_id}",
                headers={"Authorization": f"Splunk {session_key}"},
                verify=VERIFY_SSL
            )
            root = ET.fromstring(status_response.content)
            
            # Using explicit namespace
            is_done = root.find('.//ns:key[@name="isDone"]', namespace)
            
            if is_done is not None and is_done.text == "1":
                print("\nSearch completed successfully!")
                break
            print("Waiting for search completion...")
            time.sleep(2)
        else:
            raise TimeoutError("Search timed out after 30 seconds")

        # Get and display results
        results_response = requests.get(
            results_url,
            headers={"Authorization": f"Splunk {session_key}"},
            params={"output_mode": "csv"},
            verify=VERIFY_SSL
        )
        results_response.raise_for_status()
        
        print("\nRaw results:")
        print(results_response.text)
        
        # Save to file
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"splunk_results_{timestamp}.csv"
        with open(filename, 'w') as f:
            f.write(results_response.text)
            
        print(f"\nResults saved to {filename}")
        
    except Exception as e:
        print(f"\nResults retrieval failed: {str(e)}")
        exit(1)

if __name__ == "__main__":
    print("1. Authenticating...")
    session_key = get_session_key()
    
    print("\n2. Creating search job...")
    search_id = create_search_job(session_key)
    
    print("\n3. Retrieving results...")
    get_results(session_key, search_id)
